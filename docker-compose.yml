services:
  app1:
    build: .
    container_name: app1
    expose:
      - "8080"
    environment:
      - PORT=8080
      - MONGODB_URI=mongodb://mongodb1:27017,mongodb2:27017,mongodb3:27017/itemsdb?replicaSet=rs0
      - HOST=app1
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - loadbalancing
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    restart: unless-stopped

  app2:
    build: .
    container_name: app2
    expose:
      - "8080"
    environment:
      - PORT=8080
      - MONGODB_URI=mongodb://mongodb1:27017,mongodb2:27017,mongodb3:27017/itemsdb?replicaSet=rs0
      - HOST=app2
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - loadbalancing
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    restart: unless-stopped

  mongodb1:
    image: mongo:latest
    container_name: mongodb1
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    expose:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    volumes:
      - mongodb1_data:/data/db
      - mongodb1_config:/data/configdb
    networks:
      - loadbalancing
    restart: unless-stopped

  mongodb2:
    image: mongo:latest
    container_name: mongodb2
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    expose:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    volumes:
      - mongodb2_data:/data/db
      - mongodb2_config:/data/configdb
    networks:
      - loadbalancing
    restart: unless-stopped

  mongodb3:
    image: mongo:latest
    container_name: mongodb3
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    expose:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    volumes:
      - mongodb3_data:/data/db
      - mongodb3_config:/data/configdb
    networks:
      - loadbalancing
    restart: unless-stopped

  mongo-init:
    image: mongo:latest
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    command: >
      mongosh --host mongodb1:27017 --eval '
      rs.initiate({
        _id: "rs0",
        members: [
          {_id: 0, host: "mongodb1:27017"},
          {_id: 1, host: "mongodb2:27017"},
          {_id: 2, host: "mongodb3:27017"}
        ]
      });'
    networks:
      - loadbalancing

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "27017-27019:27017-27019"
    volumes: 
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/stream.d:/etc/nginx/stream.d:ro
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    depends_on:
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
    networks:
      - loadbalancing
    restart: unless-stopped

volumes:
  mongodb1_data:
    name: mongodb1_data
  mongodb1_config:
    name: mongodb1_config
  mongodb2_data:
    name: mongodb2_data
  mongodb2_config:
    name: mongodb2_config
  mongodb3_data:
    name: mongodb3_data
  mongodb3_config:
    name: mongodb3_config
  nginx_logs:
    name: nginx_logs

networks:
  loadbalancing:
    driver: bridge
    name: loadbalancing 


    #$